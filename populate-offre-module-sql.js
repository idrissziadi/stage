const { sequelize } = require('./backend/config/database');

async function populateOffreModuleSQL() {
  try {
    console.log('üöÄ D√©but du peuplement de la table OffreModule avec SQL direct...');
    console.log('üìã Contrainte: Les modules d\'une offre doivent appartenir √† la m√™me sp√©cialit√© que l\'offre\n');
    
    // 1. R√©cup√©rer toutes les offres avec leurs sp√©cialit√©s
    console.log('1Ô∏è‚É£ R√©cup√©ration des offres et sp√©cialit√©s...');
    const offres = await sequelize.query(`
      SELECT o.id_offre, o.id_specialite, s.designation_fr as specialite_nom
      FROM Offre o
      JOIN Specialite s ON o.id_specialite = s.id_specialite
      ORDER BY o.id_offre
    `, { type: sequelize.QueryTypes.SELECT });
    
    console.log(`üìä Trouv√© ${offres.length} offres`);
    
    let totalInserted = 0;
    let totalSkipped = 0;
    let totalErrors = 0;
    
    // 2. Pour chaque offre, r√©cup√©rer les modules de sa sp√©cialit√©
    for (const offre of offres) {
      console.log(`\nüîç Traitement de l'offre ID: ${offre.id_offre}`);
      console.log(`   Sp√©cialit√©: ${offre.specialite_nom} (ID: ${offre.id_specialite})`);
      
      // R√©cup√©rer les modules de cette sp√©cialit√©
      const modules = await sequelize.query(`
        SELECT id_module, code_module, designation_fr
        FROM Module
        WHERE id_specialite = ?
        ORDER BY code_module
      `, {
        replacements: [offre.id_specialite],
        type: sequelize.QueryTypes.SELECT
      });
      
      console.log(`   Modules trouv√©s dans la sp√©cialit√©: ${modules.length}`);
      
      // 3. Pour chaque module, cr√©er l'association
      for (const module of modules) {
        try {
          // V√©rifier si l'association existe d√©j√†
          const existingAssociation = await sequelize.query(`
            SELECT COUNT(*) as count
            FROM OffreModule
            WHERE id_offre = ? AND id_module = ?
          `, {
            replacements: [offre.id_offre, module.id_module],
            type: sequelize.QueryTypes.SELECT
          });
          
          if (existingAssociation[0].count > 0) {
            console.log(`   ‚è≠Ô∏è  Association d√©j√† existante: Offre ${offre.id_offre} - Module ${module.code_module}`);
            totalSkipped++;
            continue;
          }
          
          // Cr√©er l'association
          await sequelize.query(`
            INSERT INTO OffreModule (id_offre, id_module)
            VALUES (?, ?)
          `, {
            replacements: [offre.id_offre, module.id_module],
            type: sequelize.QueryTypes.INSERT
          });
          
          console.log(`   ‚úÖ Cr√©√©e: Offre ${offre.id_offre} - Module ${module.code_module} (${module.designation_fr})`);
          totalInserted++;
          
        } catch (error) {
          console.error(`   ‚ùå Erreur lors de la cr√©ation de l'association Offre ${offre.id_offre} - Module ${module.code_module}:`, error.message);
          totalErrors++;
        }
      }
    }
    
    console.log(`\nüéâ Peuplement termin√© !`);
    console.log(`   Total ins√©r√©: ${totalInserted}`);
    console.log(`   Total ignor√©: ${totalSkipped}`);
    console.log(`   Total erreurs: ${totalErrors}`);
    console.log(`   Total trait√©: ${totalInserted + totalSkipped + totalErrors}`);
    
    // 4. V√©rification finale de la coh√©rence
    console.log(`\nüîç V√©rification finale de la coh√©rence...`);
    const inconsistentAssociations = await sequelize.query(`
      SELECT om.id_offre, om.id_module, o.id_specialite as offre_specialite, m.id_specialite as module_specialite
      FROM OffreModule om
      JOIN Offre o ON om.id_offre = o.id_offre
      JOIN Module m ON om.id_module = m.id_module
      WHERE o.id_specialite != m.id_specialite
    `, { type: sequelize.QueryTypes.SELECT });
    
    if (inconsistentAssociations.length === 0) {
      console.log(`   ‚úÖ Toutes les associations sont coh√©rentes !`);
    } else {
      console.log(`   ‚ùå ${inconsistentAssociations.length} associations incoh√©rentes trouv√©es:`);
      inconsistentAssociations.forEach(inc => {
        console.log(`      Offre ${inc.id_offre} (Sp√©cialit√©: ${inc.offre_specialite}) - Module ${inc.id_module} (Sp√©cialit√©: ${inc.module_specialite})`);
      });
    }
    
    // 5. Statistiques finales
    console.log(`\nüìä Statistiques finales:`);
    const totalAssociations = await sequelize.query(`
      SELECT COUNT(*) as count FROM OffreModule
    `, { type: sequelize.QueryTypes.SELECT });
    
    console.log(`   Total associations dans la table: ${totalAssociations[0].count}`);
    
    if (totalInserted > 0) {
      console.log(`\nüéØ R√©sultat: ${totalInserted} associations cr√©√©es avec succ√®s !`);
      console.log(`   Les stagiaires verront maintenant uniquement les modules de leurs offres d'inscription.`);
    } else {
      console.log(`\n‚ö†Ô∏è  Aucune association n'a √©t√© cr√©√©e. V√©rifiez les erreurs ci-dessus.`);
    }
    
  } catch (error) {
    console.error('‚ùå Erreur lors du peuplement:', error);
  } finally {
    await sequelize.close();
  }
}

// Ex√©cuter le script
populateOffreModuleSQL();
