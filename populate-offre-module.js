const { sequelize } = require('./backend/config/database');

async function populateOffreModule() {
  try {
    // Importer et configurer les associations
    const setupAssociations = require('./backend/models/associations');
    setupAssociations();
    
    // Importer les mod√®les apr√®s configuration des associations
    const Offre = sequelize.models.Offre;
    const Module = sequelize.models.Module;
    const Specialite = sequelize.models.Specialite;
    const OffreModule = sequelize.models.OffreModule;
    
    console.log('üöÄ D√©but du peuplement de la table OffreModule...');
    console.log('üìã Contrainte: Les modules d\'une offre doivent appartenir √† la m√™me sp√©cialit√© que l\'offre\n');
    
    // R√©cup√©rer toutes les offres avec leurs sp√©cialit√©s
    const offres = await Offre.findAll({
      include: [
        {
          model: Specialite,
          as: 'specialite',
          attributes: ['id_specialite', 'designation_fr', 'designation_ar']
        }
      ]
    });
    
    console.log(`üìä Trouv√© ${offres.length} offres`);
    
    let totalInserted = 0;
    let totalSkipped = 0;
    let totalErrors = 0;
    let totalValidated = 0;
    
    for (const offre of offres) {
      console.log(`\nüîç Traitement de l'offre ID: ${offre.id_offre}`);
      console.log(`   Sp√©cialit√©: ${offre.specialite?.designation_fr || 'N/A'} (ID: ${offre.id_specialite})`);
      
      if (!offre.specialite) {
        console.log(`   ‚ö†Ô∏è  Aucune sp√©cialit√© trouv√©e pour cette offre, ignor√©e`);
        continue;
      }
      
      // R√©cup√©rer tous les modules de la sp√©cialit√© de cette offre
      const modules = await Module.findAll({
        where: { id_specialite: offre.id_specialite },
        attributes: ['id_module', 'code_module', 'designation_fr', 'id_specialite']
      });
      
      console.log(`   Modules trouv√©s dans la sp√©cialit√©: ${modules.length}`);
      
      // Validation suppl√©mentaire de la coh√©rence
      const validModules = modules.filter(module => {
        const isValid = module.id_specialite === offre.id_specialite;
        if (!isValid) {
          console.log(`   ‚ö†Ô∏è  Module ${module.code_module} a une sp√©cialit√© diff√©rente (${module.id_specialite} vs ${offre.id_specialite})`);
        }
        return isValid;
      });
      
      if (validModules.length !== modules.length) {
        console.log(`   ‚ö†Ô∏è  ${modules.length - validModules.length} modules incoh√©rents filtr√©s`);
      }
      
      console.log(`   Modules valides apr√®s filtrage: ${validModules.length}`);
      
      for (const module of validModules) {
        try {
          // V√©rifier si l'association existe d√©j√†
          const existingAssociation = await OffreModule.findOne({
            where: {
              id_offre: offre.id_offre,
              id_module: module.id_module
            }
          });
          
          if (existingAssociation) {
            console.log(`   ‚è≠Ô∏è  Association d√©j√† existante: Offre ${offre.id_offre} - Module ${module.code_module}`);
            totalSkipped++;
            continue;
          }
          
          // Validation finale avant cr√©ation
          if (module.id_specialite !== offre.id_specialite) {
            console.log(`   ‚ùå ERREUR: Incoh√©rence d√©tect√©e - Module ${module.code_module} (Sp√©cialit√©: ${module.id_specialite}) vs Offre (Sp√©cialit√©: ${offre.id_specialite})`);
            totalErrors++;
            continue;
          }
          
          // Cr√©er l'association avec requ√™te SQL directe
          await sequelize.query(`
            INSERT INTO OffreModule (id_offre, id_module) 
            VALUES (?, ?)
          `, {
            replacements: [offre.id_offre, module.id_module],
            type: sequelize.QueryTypes.INSERT
          });
          
          console.log(`   ‚úÖ Cr√©√©e: Offre ${offre.id_offre} - Module ${module.code_module} (Sp√©cialit√©: ${module.id_specialite})`);
          totalInserted++;
          totalValidated++;
          
        } catch (error) {
          console.error(`   ‚ùå Erreur lors de la cr√©ation de l'association Offre ${offre.id_offre} - Module ${module.code_module}:`, error.message);
          totalErrors++;
        }
      }
    }
    
    console.log(`\nüéâ Peuplement termin√© !`);
    console.log(`   Total ins√©r√©: ${totalInserted}`);
    console.log(`   Total ignor√©: ${totalSkipped}`);
    console.log(`   Total valid√©: ${totalValidated}`);
    console.log(`   Total erreurs: ${totalErrors}`);
    console.log(`   Total trait√©: ${totalInserted + totalSkipped + totalErrors}`);
    
    // V√©rification finale de la coh√©rence
    console.log(`\nüîç V√©rification finale de la coh√©rence...`);
    const inconsistentAssociations = await sequelize.query(`
      SELECT om.id_offre, om.id_module, o.id_specialite as offre_specialite, m.id_specialite as module_specialite
      FROM OffreModule om
      JOIN Offre o ON om.id_offre = o.id_offre
      JOIN Module m ON om.id_module = m.id_module
      WHERE o.id_specialite != m.id_specialite
    `, { type: sequelize.QueryTypes.SELECT });
    
    if (inconsistentAssociations.length === 0) {
      console.log(`   ‚úÖ Toutes les associations sont coh√©rentes !`);
    } else {
      console.log(`   ‚ùå ${inconsistentAssociations.length} associations incoh√©rentes trouv√©es:`);
      inconsistentAssociations.forEach(inc => {
        console.log(`      Offre ${inc.id_offre} (Sp√©cialit√©: ${inc.offre_specialite}) - Module ${inc.id_module} (Sp√©cialit√©: ${inc.module_specialite})`);
      });
    }
    
  } catch (error) {
    console.error('‚ùå Erreur lors du peuplement:', error);
  } finally {
    await sequelize.close();
  }
}

// Ex√©cuter le script
populateOffreModule();
