const { sequelize } = require('./config/database');
const Programme = require('./models/Programme');
const Module = require('./models/Module');
const EtablissementRegionale = require('./models/EtablissementRegionale');
const EnsModule = require('./models/Ens_Module');
const Enseignant = require('./models/Enseignant');

// Setup associations
require('./models/associations')();

async function seedProgrammeData() {
  console.log('üå± Cr√©ation de donn√©es de test pour les programmes...\n');

  try {
    await sequelize.authenticate();
    console.log('‚úÖ Connexion DB OK');

    // V√©rifier si nous avons des enseignants
    const enseignants = await Enseignant.findAll({ limit: 3 });
    console.log(`Trouv√© ${enseignants.length} enseignants`);

    // V√©rifier si nous avons des modules
    const modules = await Module.findAll({ limit: 3 });
    console.log(`Trouv√© ${modules.length} modules`);

    // V√©rifier si nous avons des √©tablissements r√©gionaux
    const etablissements = await EtablissementRegionale.findAll({ limit: 3 });
    console.log(`Trouv√© ${etablissements.length} √©tablissements r√©gionaux`);

    if (enseignants.length === 0 || modules.length === 0 || etablissements.length === 0) {
      console.log('‚ö†Ô∏è Donn√©es de base manquantes. Assurez-vous d\'avoir des enseignants, modules et √©tablissements.');
      return;
    }

    // Cr√©er des associations enseignant-module si elles n'existent pas
    console.log('\nüìö Cr√©ation des associations enseignant-module...');
    for (let i = 0; i < Math.min(enseignants.length, modules.length); i++) {
      const existing = await EnsModule.findOne({
        where: {
          id_enseignant: enseignants[i].id_enseignant,
          id_module: modules[i].id_module
        }
      });

      if (!existing) {
        await EnsModule.create({
          id_enseignant: enseignants[i].id_enseignant,
          id_module: modules[i].id_module
        });
        console.log(`‚úÖ Association cr√©√©e: Enseignant ${enseignants[i].id_enseignant} -> Module ${modules[i].id_module}`);
      } else {
        console.log(`‚ö†Ô∏è Association existe d√©j√†: Enseignant ${enseignants[i].id_enseignant} -> Module ${modules[i].id_module}`);
      }
    }

    // Cr√©er des programmes de test
    console.log('\nüìã Cr√©ation des programmes de test...');
    const programmesToCreate = [
      {
        code_programme: 'PROG-001',
        titre_fr: 'Programme de Formation Web',
        titre_ar: 'ÿ®ÿ±ŸÜÿßŸÖÿ¨ ÿ™ŸÉŸàŸäŸÜ ÿßŸÑŸàŸäÿ®',
        status: 'ŸÖŸÇÿ®ŸàŸÑ',
        observation: 'Programme valid√© pour formation web',
        id_etab_regionale: etablissements[0].id_etab_regionale,
        id_module: modules[0].id_module
      },
      {
        code_programme: 'PROG-002',
        titre_fr: 'Programme de Formation Mobile',
        titre_ar: 'ÿ®ÿ±ŸÜÿßŸÖÿ¨ ÿ™ŸÉŸàŸäŸÜ ÿßŸÑÿ¨ŸàÿßŸÑ',
        status: 'ŸÅŸä_ÿßŸÑÿßŸÜÿ™ÿ∏ÿßÿ±',
        observation: 'Programme en attente de validation',
        id_etab_regionale: etablissements[0].id_etab_regionale,
        id_module: modules[1]?.id_module || modules[0].id_module
      },
      {
        code_programme: 'PROG-003',
        titre_fr: 'Programme de Formation Base de Donn√©es',
        titre_ar: 'ÿ®ÿ±ŸÜÿßŸÖÿ¨ ÿ™ŸÉŸàŸäŸÜ ŸÇŸàÿßÿπÿØ ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™',
        status: 'ŸÖÿ±ŸÅŸàÿ∂',
        observation: 'Programme refus√© - contenu insuffisant',
        id_etab_regionale: etablissements[1]?.id_etab_regionale || etablissements[0].id_etab_regionale,
        id_module: modules[2]?.id_module || modules[0].id_module
      }
    ];

    for (const programmeData of programmesToCreate) {
      const existing = await Programme.findOne({
        where: { code_programme: programmeData.code_programme }
      });

      if (!existing) {
        const programme = await Programme.create(programmeData);
        console.log(`‚úÖ Programme cr√©√©: ${programme.code_programme} - ${programme.titre_fr}`);
      } else {
        console.log(`‚ö†Ô∏è Programme existe d√©j√†: ${programmeData.code_programme}`);
      }
    }

    // V√©rifier les r√©sultats
    console.log('\nüîç V√©rification des donn√©es cr√©√©es...');
    const allProgrammes = await Programme.findAll({
      include: [
        {
          model: Module,
          as: 'module',
          attributes: ['designation_fr', 'code_module']
        },
        {
          model: EtablissementRegionale,
          as: 'etablissementRegionale',
          attributes: ['nom_fr']
        }
      ]
    });

    console.log(`‚úÖ Total programmes dans la DB: ${allProgrammes.length}`);
    allProgrammes.forEach(p => {
      console.log(`- ${p.code_programme}: ${p.titre_fr} (${p.status})`);
    });

    console.log('\nüéâ Donn√©es de test cr√©√©es avec succ√®s !');

  } catch (error) {
    console.error('‚ùå Erreur:', error.message);
    console.error('Stack:', error.stack);
  } finally {
    await sequelize.close();
  }
}

seedProgrammeData();
