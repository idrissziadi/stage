const { sequelize } = require('./config/database');
const Programme = require('./models/Programme');
const Module = require('./models/Module');
const EtablissementRegionale = require('./models/EtablissementRegionale');

async function seedProgrammeData() {
  try {
    console.log('üå± Ajout de donn√©es de test pour les programmes...\n');

    // V√©rifier si des modules existent
    const modules = await Module.findAll();
    if (modules.length === 0) {
      console.log('‚ùå Aucun module trouv√©. Veuillez d\'abord ajouter des modules.');
      return;
    }

    // V√©rifier si des √©tablissements r√©gionaux existent
    const etablissements = await EtablissementRegionale.findAll();
    if (etablissements.length === 0) {
      console.log('‚ùå Aucun √©tablissement r√©gional trouv√©. Veuillez d\'abord ajouter des √©tablissements.');
      return;
    }

    // V√©rifier si des programmes existent d√©j√†
    const existingProgrammes = await Programme.count();
    if (existingProgrammes > 0) {
      console.log(`‚úÖ ${existingProgrammes} programmes existent d√©j√†.`);
      return;
    }

    // Donn√©es de test
    const programmeData = [
      {
        code_programme: 'PROG-2024-001',
        titre_fr: 'Math√©matiques Avanc√©es',
        titre_ar: 'ÿßŸÑÿ±Ÿäÿßÿ∂Ÿäÿßÿ™ ÿßŸÑŸÖÿ™ŸÇÿØŸÖÿ©',
        status: 'ŸÅŸä_ÿßŸÑÿßŸÜÿ™ÿ∏ÿßÿ±',
        id_module: modules[0].id_module,
        id_etab_regionale: etablissements[0].id_etab_regionale
      },
      {
        code_programme: 'PROG-2024-002',
        titre_fr: 'Physique Quantique',
        titre_ar: 'ÿßŸÑŸÅŸäÿ≤Ÿäÿßÿ° ÿßŸÑŸÉŸÖŸäÿ©',
        status: 'ŸÖŸÇÿ®ŸàŸÑ',
        observation: 'Programme valid√© avec succ√®s',
        id_module: modules[0].id_module,
        id_etab_regionale: etablissements[0].id_etab_regionale
      },
      {
        code_programme: 'PROG-2024-003',
        titre_fr: 'Informatique Appliqu√©e',
        titre_ar: 'ÿßŸÑŸÖÿπŸÑŸàŸÖÿßÿ™Ÿäÿ© ÿßŸÑÿ™ÿ∑ÿ®ŸäŸÇŸäÿ©',
        status: 'ŸÖÿ±ŸÅŸàÿ∂',
        observation: 'Programme refus√© - contenu insuffisant',
        id_module: modules[1] ? modules[1].id_module : modules[0].id_module,
        id_etab_regionale: etablissements[1] ? etablissements[1].id_etab_regionale : etablissements[0].id_etab_regionale
      },
      {
        code_programme: 'PROG-2024-004',
        titre_fr: 'Chimie Organique',
        titre_ar: 'ÿßŸÑŸÉŸäŸÖŸäÿßÿ° ÿßŸÑÿπÿ∂ŸàŸäÿ©',
        status: 'ŸÅŸä_ÿßŸÑÿßŸÜÿ™ÿ∏ÿßÿ±',
        id_module: modules[1] ? modules[1].id_module : modules[0].id_module,
        id_etab_regionale: etablissements[1] ? etablissements[1].id_etab_regionale : etablissements[0].id_etab_regionale
      },
      {
        code_programme: 'PROG-2024-005',
        titre_fr: 'Biologie Mol√©culaire',
        titre_ar: 'ÿßŸÑÿ®ŸäŸàŸÑŸàÿ¨Ÿäÿß ÿßŸÑÿ¨ÿ≤Ÿäÿ¶Ÿäÿ©',
        status: 'ŸÖŸÇÿ®ŸàŸÑ',
        observation: 'Excellent programme p√©dagogique',
        id_module: modules[2] ? modules[2].id_module : modules[0].id_module,
        id_etab_regionale: etablissements[2] ? etablissements[2].id_etab_regionale : etablissements[0].id_etab_regionale
      }
    ];

    // Ins√©rer les donn√©es
    const createdProgrammes = await Programme.bulkCreate(programmeData);

    console.log(`‚úÖ ${createdProgrammes.length} programmes ajout√©s avec succ√®s !`);
    console.log('\nüìä R√©sum√© des programmes cr√©√©s :');
    
    createdProgrammes.forEach((programme, index) => {
      console.log(`${index + 1}. ${programme.code_programme} - ${programme.titre_fr} (${programme.status})`);
    });

    console.log('\nüéâ Donn√©es de test ajout√©es avec succ√®s !');

  } catch (error) {
    console.error('‚ùå Erreur lors de l\'ajout des donn√©es:', error.message);
  } finally {
    await sequelize.close();
  }
}

// Ex√©cuter le script
seedProgrammeData();
